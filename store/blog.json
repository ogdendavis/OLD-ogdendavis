{
  "0": {
    "title": "Failure",
    "date": "September 1, 2018",
    "image": "images/blog/picard-facepalm.jpg",
    "imageOrientation": "landscape",
    "imageAlt": "Captain Picard fails sometimes, too",
    "snippet": "Everyone fails, but failure is a way to learn",
    "fullText": "<p>Everybody fails. It happens. At some point, everyone will fail a class, drop a touchdown pass, get dumped, get fired, or fail in some other way.</p><p>Failure happens in coding, too. You spend hours trying to get a toggle to work, and it just won’t do what you want. You have an idea for the most beautiful landing page the world has ever seen, but can’t make the CSS match your vision. But failure is not permanent, and you can always bounce back and move forward. Here's a few things I do to turn a failure into a positive:</p><ol><li>Think about why you failed. Don't dwell on the negative or wallow in self-pity, but spend a little time trying to think logically about why you failed and what you can do in the future to succeed.</li><li>Stay positive. If you let something get under your skin, it can start a downward spiral. Instead of focusing on this one thing that you couldn’t get to work, think about all the other projects on which you’ve seen success. Keeping a positive mindset prevents one failure from turning into multiple failures!</li><li>Immediately take one small step to ensure future success. It doesn't matter how small a step it is -- doing something immediately that will help you overcome this failure changes your mindset and gives you a huge psychological boost. If the thing you couldn’t get to work is a React component, spend half an hour reading the awesome <a href='https://reactjs.org/docs/getting-started.html' target='_blank'>React docs</a>. You may not find the solution to your specific problem, but you will generally improve your React knowledge so you can succeed on future projects.</li></ol><p>If all else fails, walk away on your own terms. It may just not be your day. Maybe you slept poorly or are distracted by stress at work and you just can't seem to do anything right. If nothing is going well, then admit to yourself that it's not your day and deal with it accordingly. Go catch up on email (everyone is always behind on email), or make some little tweak you wanted to do on another project. Don't ram your metaphorical head into a metaphorical wall (or your real head into a real wall) over and over if it's obviously doing no good.</p><p>Remember: failures are going to happen, they're temporary, and they're a great way to learn and improve yourself even more.</p><p class='post__footnote'>This is an adaptation of a post I originally wrote for an <a href='http://lucastraining.blogspot.com/' target='_blank'>old fitness blog</a> in 2008.</p>"
  },
  "1": {
    "title": "Abstraction",
    "date": "September 4, 2018",
    "image": "images/blog/bluetooth.png",
    "imageOrientation": "portrait",
    "imageAlt": "Bluetooth logo",
    "snippet": "A rant about the obfuscation of what our devices actually do",
    "fullText": "<p>As the devices we use get more and more complex, there are more and more layers between the surface of the object with which we interact, and the real core of what is happening inside it. In technology, this concept is referred to as abstraction.</p><p>On one hand, abstraction is a necessary and wonderful part of technological advancement -- nobody wants to live in a world where you have to get a graduate degree in electrical engineering to be qualified to operate a smartphone. On the other hand, it’s really effing annoying when my devices do something other than, or in addition to, what I think I told them to do.</p><p>All that is my justification to say this: I’m really annoyed at the way my phone manages its Bluetooth and WiFi connections.</p><p>Sometimes, I want to turn these connections off. Maybe I’m low on battery and want to turn off unnecessary power-drainers. Maybe I’m in an airport, and I’m being paranoid about people trying to grab data off of travelers’ devices using one of those Bluetooth hacks that seems to pop up every few months.</p><p>It used to be that I could turn off my phone’s WiFi and Bluetooth capabilities from the Control Center (that screen that comes up when you swipe down from the top of the iPhone’s display). But now, those buttons in the Control Center only “disconnect from (WiFi/Bluetooth) devices until tomorrow,” leaving some background connectivity active instead of turning the send/receive functions completely off. I can still turn these things off from settings, but that process involves 3 screens and at least 8 touches, as opposed to 1 screen and 3 touches when I could do so from the Control Center.</p><p>I’m aware that, in the grand scheme of things, this is not a big deal. In the “olden days” of the 1990’s, dads everywhere complained about how modern cars were getting too complex for them to tinker with on Saturday mornings, relying on the expertise earned in high-school shop class to maintain the family van or work truck. But mechanics can still fix what goes wrong, and cars are in general much more reliable, safer, and easier to use than they were 30 years ago. I guess this post is just an extension of that time-honored tradition of bemoaning the increasing complexity and abstraction in the world, even as we recognize and enjoy the benefits thereof.</p><p>Abstraction is essential in the modern world -- it allows users to have a clear idea of what they are doing with their device or app, without having to understand the exact mechanisms through which that effect is being achieved. However, abstraction can become problematic when technology-makers use it to obfuscate what their products are doing, or to make the device do something similar to, but in some essential way different than, what a user would reasonably expect it to do.</p><p>I’d rather see abstraction used to make it more clear to the user what his or her device is doing, instead of less.</p>"
  },
  "2": {
    "title": "Observations From My Near-Arrest",
    "date": "September 7, 2018",
    "image": "images/blog/police-tape.jpg",
    "imageOrientation": "landscape",
    "imageAlt": "Police tape with flashing lights behind",
    "snippet": "An early-morning run gone awry",
    "fullText": "<p>In 2014, I almost got arrested.</p><p>Let me set the scene: It was 5:45 a.m., and I was in the middle of a one-mile run test — trying to go as fast as I could for one mile. I was running in the street in the pre-dawn darkness, and as I approached a turn, I saw the lights of two police cars and an ambulance across the road. “Wow, there’s some early-morning drama going on,” I thought.</p><p>As I turned the corner, I heard yelling behind me, “LOTS of drama,” I thought.</p><p>As I approached my next turn, one block up, I heard someone yelling closer behind me, saying, “Sir! Stop!”</p><p>“Uh-oh.”</p><p>I turned around to see two police officers running towards me. I stopped and faced them, hands up. “Good morning,” I said. It was all I could think to say.</p><p>The officers approached me and asked for my name. I explained that I was running as part of a CrossFit class, and that the gym was just around the corner. They explained that they were looking for a shirtless man who had beaten up his father and then run off. They handcuffed me as I told them that one of my classmates, Julie, would be along in a minute, and she could vouch for me.</p><p>After just a couple of minutes, they figured out that I really was just running for exercise, and let me go. “Sorry,” they said. “No worries,” I said, and Julie and I headed back towards the gym.</p><p>It was an unusual way to start the day. But this isn’t a personal blog, and you’re not here to read random anecdotes about my life. So now, I present to you, three observations from almost getting arrested while running:</p><p><strong>1. Running with headphones or earbuds is a bad idea.</strong></p><p>I’ve never liked the idea of running on public streets with headphones on. There are too many idiots out there, texting while driving, or drunk, or just not paying attention. All it takes is one moron who doesn’t see you, and you’re a smear on the asphalt. Therefore, I like to be able to hear cars or people approaching me when I run. This experience reinforced that notion, because if I hadn’t been able to hear the officers yelling at me, I wouldn’t have stopped running. And when you’re running away from the police, whether you know you are or not, only bad things can happen.</p><p><strong>2. Many police officers could use a workout</strong></p><p>I was halfway through a one-mile run, out of breath and unable to find a comfortable stride (It was 5:45 a.m., remember). The officers had been standing around interviewing witnesses, and were starting fresh. When I turned around and saw them running towards me, I got the sense that they weren’t running quickly enough to actually catch me if I’d kept running. Common sense dictates that a police officer should probably be able to sprint quickly enough catch up to a jogging suspect over a 50-100 meter span, but that apparently wasn’t the case here. It’s a little scary when I think about what could have happened if I’d kept running and they determined that they wouldn’t catch me on foot. So I’m now officially a proponent of keeping the police as fit as possible.</p><p><strong>3. Group classes are the best</strong></p><p>At the time, I was a CrossFit coach and trainer who didn’t always get to work out with classes at the gym. When I did get to work out with the class, I loved it. I like having people around me to encourage and support me, as I encourage and support them. Suffering alongside another person gives you that little extra bit of motivation to keep going, to push yourself, and to do your best. It’s also handy to have a running buddy who can confirm to the police that you’ve been working out together and you really are just out for a pre-dawn fitness run.</p><p class='post__footnote'>This is an adaptation of a post I originally wrote for a <a href='http://crossfitmanatee.com/08-20-14-wednesday-observations-from-my-near-arrest/' target='_blank'>the CrossFit Manatee blog</a> in 2014.</p>"
  },
  "3": {
    "title": "A Newbie's CSS Workflow Trick",
    "date": "September 12, 2018",
    "image": "images/blog/firefox-styleeditor.png",
    "imageOrientation": "landscape",
    "imageAlt": "A Firefox window with the Style Editor opened",
    "snippet": "A discovery in Firefox's Style Editor helped me speed up my CSS process",
    "fullText": "<p>When I’m working on a front-end project, I’m almost always working with files stored locally, doing everything from project setup to final debugging on my trusty little laptop. I don’t have a fancy dual-screen workstation, so I’m constantly switching between windows -- from my terminal to my text editor to my browser, back to my text editor, etc, etc.</p><p>One of the most annoying pieces of front-end development in this workflow, which I think is a typical pattern for many beginning front-end developers or professionals working remotely, is writing and debugging my CSS. Or rather, this was annoying until I found out that Firefox’s Style Editor can almost completely eliminate this pain point for me.</p><p>Here’s what I used to do when writing my CSS: First, I’d apply styling classes to my HTML or JSX and link a fresh stylesheet. Then. I’d open up the new CSS file in my text editor and apply the rules that I thought would style my content how I wanted it. I’d save my work, open up the project in a browser, and see how it looked. I’d either experiment with changes in the inspector or just eyeball the adjustments I needed to make, and then I’d then go back to the text editor and make the edits. I’d repeat ad nauseum until the styling was correct, clicking back and forth between my text editor and my browser over and over again… It was a frustratingly slow and clumsy process.</p><p>But then I discovered something that most experienced developers probably take for granted: If you’re modifying a locally-saved stylesheet in Firefox’s Style Editor, you can save your changes to that stylesheet directly from Firefox. It’s not even hard -- all you have to do is hit ctrl-s or cmd-s while you have the stylesheet selected, or just click the handy-dandy “Save” link that pops up next to the filename in the Style Editor window. That’s it. It’s so simple, and so powerful, and it saves me so much time when I’m debugging some weird CSS issue.</p><p>However, with great power comes great responsibility. If you’re in the habit of hitting save frequently as you work, editing your CSS from the Style Editor can be risky. It’s hard to backtrack changes that you’ve made from the Style Editor -- you can’t just hit “undo” like you can in your text editor. And if, like me, you’re used to experimenting in your browser’s Dev Tools, knowing that you can just reload the page if you screw things up too badly, you could accidentally end up saving a CSS file that has all sorts of exotic rules written in, and that you can’t easily revert back to the previous version.</p><p>Despite the dangers, if you’re a front-end developer who does your coding locally on a single-monitor machine, writing and saving your CSS from within the Firefox Style Editor can really speed up the styling process, saving you a huge amount of time and frustration. So give it a shot!</p>"
  },
  "4": {
    "title": "Writing and Coding",
    "date": "September 18, 2018",
    "image": "images/blog/books.jpg",
    "imageOrientation": "landscape",
    "imageAlt": "A stack of books with reading glasses on top",
    "snippet": "On using words to put ideas out into the world",
    "fullText": "<p>Ever since I was a kid, I’ve loved books. My mom played a big part in this; she read to me when I was really little, and always encouraged me to read. She told me when I was young that whenever I wanted a book, she would buy it for me -- and she stuck to that promise throughout my youth. (Thanks, mom!)</p><p>So I grew up reading, and loved immersing myself in the imaginary worlds of books. Over time, my love of books also developed into a love of writing. Just as I enjoyed immersing myself in the world of a good book, I enjoyed creating my own little worlds out of nothing but words on paper. I loved, and still love, the feeling of putting ideas down on paper (or, more commonly, a screen) so that other people could pick them up later, examine them, and use them however they saw fit.</p><p>I still love reading and writing, and I think that reading good books and writing about what you read are great ways to learn about yourself and the world around you. But when I was in high school and college, I clung so strongly to being a “humanities guy” that I didn’t really push myself to fully explore other areas. I took math and science courses as part of my undergraduate and graduate degrees, but I didn’t dive into those courses wholeheartedly; I did what I had to do to get decent grades, and didn’t go beyond that.</p><p>I regret that narrow-mindedness now, because I’ve found that I really, really love coding. If writing is putting ideas on to paper so that other people can pick them up and use them in their own lives, then coding is taking those ideas and making them into little idea-robots that can run around and do things on their own.</p><p>The processes of writing essays and writing code are similar: In both, you go through the stages of ideation, drafting, revision, and publication. In both, you can spend long hours agonizing over details and finding just the right tweak to make everything fall together perfectly. The syntax is different, and the processes (and the people who do them) are often perceived differently, but the two things are fundamentally the same: You take an idea, and you use words to put that idea out into the world.</p><p>I wish that I’d found this bridge between literature and computer science earlier in life. Being a mid-30’s career-changer is tough. I’m in this weird in-between position where many hiring managers think I’m too experienced for an internship (But I’m not! I’d love to be an intern!), but not yet experienced enough for a junior developer job.</p><p>I know I’ll find a way through. I’ll keep learning, and I’ll keep working, and I’ll keep networking, and I’ll keep plugging along until I can finally, officially, call myself a web developer. I’ll code every day because I love the process, and I’ll keep trying to find ways to put myself out there and get more experience.</p><p>And in the evenings, when my wife and I are relaxing on the couch, I’ll pour myself a glass of wine, call the dog up onto my lap, and bury my nose in a good book.</p>"
  }
}
